name: unit_tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  unit_test_on_gcc:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest ]  # [ ubuntu-latest, macos-latest ]
        build_type: [ Release ]

    env:
      COVERAGE_DIR: ${{github.workspace}}/coverage

    steps:
    - uses: actions/checkout@v2

    - name: Install gtest on linux
      if: ${{ !startsWith(matrix.os, 'macos') }}
      run: |
        sudo apt-get install libgtest-dev
        cd /usr/src/gtest
        sudo cmake CMakeLists.txt
        sudo make
        sudo cp */*.a /usr/lib
        sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a
        sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a

    # - name: Install gtest on mac
    #   if: ${{ startsWith(matrix.os, 'macos') }}
    #   run: |
    #     git clone https://github.com/google/googletest
    #     cd googletest
    #     mkdir build
    #     cd build
    #     cmake ..
    #     make
    #     make install

    - name: Install other deps on linux
      if: ${{ !startsWith(matrix.os, 'macos') }}
      run: |
        sudo apt-get install -y lcov

    # - name: Install other deps on mac
    #   if: ${{ startsWith(matrix.os, 'macos') }}
    #   run: |
    #     brew install lcov

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DENABLE_COVERAGE=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

    - name: Run tests
      working-directory: ${{github.workspace}}
      run: ${{github.workspace}}/build/tests/jsonxx_test

    - name: Generate coverage files
      run: |
        mkdir ${{env.COVERAGE_DIR}}
        lcov --capture --directory . --output-file ${{env.COVERAGE_DIR}}/coverage.info
        lcov --remove ${{env.COVERAGE_DIR}}/coverage.info '/usr/*' --output-file ${{env.COVERAGE_DIR}}/coverage.info
        lcov --remove ${{env.COVERAGE_DIR}}/coverage.info '*/examples/*' --output-file ${{env.COVERAGE_DIR}}/coverage.info
        lcov --remove ${{env.COVERAGE_DIR}}/coverage.info '*/tests/*' --output-file ${{env.COVERAGE_DIR}}/coverage.info
        lcov --list ${{env.COVERAGE_DIR}}/coverage.info # debug info

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ${{env.COVERAGE_DIR}}/coverage.info
        # directory: ${{env.COVERAGE_DIR}}
        # functionalities: gcov,gcovout
        env_vars: OS
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true

  unit_test_on_msvc:
    runs-on: windows-latest

    env:
      MSVC_SOLUTION_FILE_PATH: .

    strategy:
      matrix:
        configuration: [ Release ]
        platform: [ x86, x64 ]

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{github.workspace}}
      run: nuget restore ${{env.MSVC_SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{github.workspace}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{matrix.configuration}} /p:Platform=${{matrix.platform}} ${{env.MSVC_SOLUTION_FILE_PATH}}

    - name: Run tests
      working-directory: ${{github.workspace}}
      run: '& "${{github.workspace}}/tests/output/jsonxx_test.exe"'
